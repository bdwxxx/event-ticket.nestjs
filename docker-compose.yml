services:
  auth-service:
    build:
      context: . # change after add more services
      dockerfile: Dockerfile
      args:
        - PORT=3000
        - SERVICE=auth
    container_name: auth-service
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - NODE_ENV=production
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/auth-service?authSource=admin
      - MONGO_USER=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.auth-forward.forwardauth.address=http://auth-service:3000/auth/webhook-check"
      - "traefik.http.middlewares.auth-forward.forwardauth.authResponseHeaders=Authorization"
      - "traefik.http.routers.auth.rule=Host(`localhost`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.services.auth.loadbalancer.server.port=3000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
  events-service:
    build:
      context: . # change after add more services
      dockerfile: Dockerfile
      args:
        - PORT=3001
        - SERVICE=events
    container_name: events-service
    ports:
      - "3001:3001"
    labels:
      - traefik.enable=true
      - traefik.http.routers.events.rule=Host(`localhost`) && PathPrefix(`/events`)
      - traefik.http.routers.events.entrypoints=web
      - traefik.http.services.events.loadbalancer.server.port=3001
      - traefik.http.routers.events.middlewares=auth-forward@docker
    networks:
      - app-network
    restart: unless-stopped

  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"  # dashboard
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"  # dashboard port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data: